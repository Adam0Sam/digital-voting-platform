generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    STUDENT
    TEACHER
    PARENT
    ADMIN
    SUPER_ADMIN
    GUEST
}

enum Grade {
    IA
    IB
    IC
    ID
    IE
    IIA
    IIB
    IIC
    IID
    IIE
    IIIA
    IIIB
    IIIC
    IIID
    TB1
    IVA
    IVB
    IVC
    IVD
    TB2
    NONE
}

model User {
    id            String     @id @default(uuid())
    personalNames String[]
    familyName    String
    grade         Grade
    roles         UserRole[]

    actionLogs       UserActionLog[]
    votes            Vote[]
    managedProposals ProposalManager[]

    @@unique([personalNames, familyName, grade])
    @@index([personalNames, familyName, grade])
}

enum ProposalStatus {
    DRAFT
    ACTIVE
    RESOLVED
    ABORTED
}

enum ProposalVisibility {
    PUBLIC
    AGENT_ONLY
    MANAGER_ONLY
}

model Proposal {
    id          String             @id @default(uuid())
    title       String
    description String
    startDate   DateTime
    endDate     DateTime
    status      ProposalStatus
    visibility  ProposalVisibility @default(AGENT_ONLY)

    votes    Vote[]
    managers ProposalManager[]

    choices     ProposalChoice[]
    choiceCount Int
}

model ProposalChoice {
    id          String  @id @default(uuid())
    value       String
    description String?

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    votes Vote[]

    @@unique([value, proposalId])
}

enum ProposalManagerRole {
    OWNER
    REVIEWER
}

model ProposalManager {
    id   String              @id @default(uuid())
    role ProposalManagerRole

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String
}

enum VoteStatus {
    PENDING
    RESOLVED
}

model Vote {
    id     String     @id @default(uuid())
    status VoteStatus @default(PENDING)

    user       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String
    proposal   Proposal         @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String
    choices    ProposalChoice[]

    @@unique([userId, proposalId])
}

model UserActionLog {
    id      String   @id @default(uuid())
    message String?
    time    DateTime @default(now())
    user    User     @relation(fields: [userId], references: [id])
    userId  String
}
