generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    STUDENT
    TEACHER
    PARENT
    ADMIN
    SUPER_ADMIN
    GUEST
}

enum Grade {
    IA
    IB
    IC
    ID
    IE
    IIA
    IIB
    IIC
    IID
    IIE
    IIIA
    IIIB
    IIIC
    IIID
    TB1
    IVA
    IVB
    IVC
    IVD
    TB2
    NONE
}

model User {
    id            String     @id @default(uuid())
    email         String?
    personalNames String[]
    familyName    String
    grade         Grade
    roles         UserRole[]

    actionLogs UserActionLog[]

    votes            Vote[]
    managedProposals Manager[]

    authoredPermissions ManagerPermissions[]

    active Boolean? @default(true)

    @@unique([personalNames, familyName, grade])
    @@index([personalNames, familyName, grade])
}

model UserPattern {
    id         String     @id @default(uuid())
    grades     Grade[]
    roles      UserRole[]
    Proposal   Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String     @unique
}

enum ProposalStatus {
    DRAFT
    ACTIVE
    RESOLVED
    ABORTED
}

enum ProposalVisibility {
    PUBLIC
    AGENT_ONLY
    MANAGER_ONLY
}

enum VotingSystem {
    FIRST_PAST_THE_POST
    RANKED_CHOICE
    ABSOLUTE_MAJORITY
}

model Proposal {
    id             String   @id @default(uuid())
    title          String
    description    String
    startDate      DateTime
    endDate        DateTime
    resolutionDate DateTime

    status      ProposalStatus
    visibility  ProposalVisibility @default(AGENT_ONLY)
    userPattern UserPattern?

    votes    Vote[]
    managers Manager[]

    votingSystem VotingSystem

    candidates    Candidate[]
    choiceCount   Int
    userPatternId String?
    UserActionLog UserActionLog[]
}

model Candidate {
    id          String  @id @default(uuid())
    value       String
    description String?

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    votes Vote[]

    @@unique([value, proposalId])
}

model ManagerRole {
    id          String  @id @default(uuid())
    roleName    String
    description String?

    managers Manager[]

    permissionsId String
    permissions   ManagerPermissions @relation(fields: [permissionsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ManagerPermissions {
    id                 String        @id @default(uuid())
    managerRoles       ManagerRole[]
    author             User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId           String
    canEditTitle       Boolean       @default(false)
    canEditDescription Boolean       @default(false)
    canEditDates       Boolean       @default(false)
    canEditStatus      Boolean       @default(false)
    canEditVisibility  Boolean       @default(false)
    canDeleteVotes     Boolean       @default(false)
    canCreateVotes     Boolean       @default(false)
    canEditVotes       Boolean       @default(false)
    canEditManagers    Boolean       @default(false)
    canEditCandidates  Boolean       @default(false)
    canEditChoiceCount Boolean       @default(false)
    canEditUserPattern Boolean       @default(false)
    canManuallyResolve Boolean       @default(false)
}

model Manager {
    id String @id @default(uuid())

    role          ManagerRole @relation(fields: [managerRoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    managerRoleId String

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String
}

enum VoteStatus {
    PENDING
    RESOLVED
}

model Vote {
    id     String     @id @default(uuid())
    status VoteStatus @default(PENDING)

    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String
    proposal   Proposal    @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String
    candidates Candidate[]

    @@unique([userId, proposalId])
}

model UserActionLog {
    id         String      @id @default(uuid())
    action     UserActions
    userAgent  String?
    message    String?
    time       DateTime    @default(now())
    user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String?
    proposal   Proposal?   @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String?
}

enum UserActions {
    SIGNUP
    SIGNIN
    CREATE_PROPOSAL
    EDIT_START_END_DATES
    EDIT_RESOLUTION_DATE
    MANUALLY_RESOLVE_PROPOSAL
    EDIT_TITLE
    EDIT_DESCRIPTION
    EDIT_STATUS
    EDIT_VISIBILITY
    REMOVE_CANDIDATE
    ADD_CANDIDATE
    EDIT_CHOICE_COUNT
    EDIT_PATTERN_GRADE
    EDIT_PATTERN_ROLE
}
