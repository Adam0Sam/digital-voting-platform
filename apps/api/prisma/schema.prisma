// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
  SUPER_ADMIN
  GUEST
}

enum ProposalStatus {
  PENDING
  RESOLVED
  ABORTED
}

enum UserVoteStatus {
  PENDING
  RESOLVED
}

enum Grade {
  IA
  IB
  IC
  ID
  IE
  IIA
  IIB
  IIC
  IID
  IIE
  IIIA
  IIIB
  IIIC
  IIID
  TB1
  IVA
  IVB
  IVC
  IVD
  TB2
  NONE
}

model User {
  id            String     @id @default(uuid())
  personalNames String[]
  familyName    String
  grade         Grade?
  roles         UserRole[] @default([GUEST])

  logs     Log[]
  userVote UserVote[]

  proposalsOwnedBy    Proposal[] @relation("Owners")
  proposalsReviewedBy Proposal[] @relation("Reviewers")

  @@unique([personalNames, familyName])
  @@index([personalNames, familyName, grade])
}

model UserVote {
  id                        String                  @id @default(uuid())
  status                    UserVoteStatus          @default(PENDING)
  user                      User                    @relation(fields: [userId], references: [id])
  userId                    String
  proposal                  Proposal                @relation(fields: [proposalId], references: [id])
  proposalId                String
  chosenResolution          ProposalResolutionValue @relation(fields: [proposalResolutionValueId], references: [id])
  proposalResolutionValueId String
}

model Log {
  id        String   @id @default(uuid())
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Proposal {
  id               String                    @id @default(uuid())
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime
  status           ProposalStatus            @default(PENDING)
  userVote         UserVote[]
  resolutionValues ProposalResolutionValue[]
  owners           User[]                    @relation("Owners")
  reviewers        User[]                    @relation("Reviewers")
}

model ProposalResolutionValue {
  id          String     @id @default(uuid())
  value       String
  description String?
  proposal    Proposal   @relation(fields: [proposalId], references: [id])
  proposalId  String
  userVote    UserVote[]
}
