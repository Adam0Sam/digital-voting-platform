generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    STUDENT
    TEACHER
    PARENT
    ADMIN
}

enum Grade {
    IA
    IB
    IC
    ID
    IE
    IIA
    IIB
    IIC
    IID
    IIE
    IIIA
    IIIB
    IIIC
    IIID
    TB1
    IVA
    IVB
    IVC
    IVD
    TB2
    NONE
}

model User {
    id            String     @id @default(uuid())
    email         String?
    personalNames String[]
    familyName    String
    grade         Grade
    roles         UserRole[]

    actionLogs UserActionLog[]

    votes            Vote[]
    managedProposals Manager[]

    authoredPermissions ManagerPermissions[]

    active           Boolean?           @default(true)
    UserNotification UserNotification[]

    @@unique([personalNames, familyName, grade])
    @@index([personalNames, familyName, grade])
}

model UserPattern {
    id         String     @id @default(uuid())
    grades     Grade[]
    roles      UserRole[]
    Proposal   Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String     @unique
}

enum ProposalStatus {
    DRAFT
    ACTIVE
    RESOLVED
    ABORTED
}

enum ProposalVisibility {
    PUBLIC
    AGENT_ONLY
    MANAGER_ONLY
}

enum VotingSystem {
    FIRST_PAST_THE_POST
    RANKED_CHOICE
    ABSOLUTE_MAJORITY
}

model Proposal {
    id             String   @id @default(uuid())
    title          String
    description    String
    startDate      DateTime
    endDate        DateTime
    resolutionDate DateTime

    status      ProposalStatus
    visibility  ProposalVisibility @default(AGENT_ONLY)
    userPattern UserPattern?

    votes    Vote[]
    managers Manager[]

    votingSystem VotingSystem

    candidates       Candidate[]
    choiceCount      Int
    userPatternId    String?
    UserActionLog    UserActionLog[]
    UserNotification UserNotification[]
}

model Candidate {
    id          String  @id @default(uuid())
    value       String
    description String?

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    suggestedIn    VoteSuggestion[]
    voteSelections VoteSelection[]

    @@unique([value, proposalId])
}

model ManagerRole {
    id          String  @id @default(uuid())
    roleName    String
    description String?

    managers Manager[]

    permissionsId String
    permissions   ManagerPermissions @relation(fields: [permissionsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ManagerPermissions {
    id                      String        @id @default(uuid())
    managerRoles            ManagerRole[]
    author                  User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId                String
    canEditTitle            Boolean       @default(false)
    canEditDescription      Boolean       @default(false)
    canEditDates            Boolean       @default(false)
    canEditProposalStatus   Boolean       @default(false)
    canEditVisibility       Boolean       @default(false)
    canEditVotersList       Boolean       @default(false)
    canOfferVoteSuggestions Boolean       @default(false)
    canChangeVoteStatus     Boolean       @default(false)
    canEditCandidates       Boolean       @default(false)
    canEditChoiceCount      Boolean       @default(false)
    canEditUserPattern      Boolean       @default(false)
    canManuallyResolve      Boolean       @default(false)
}

model Manager {
    id String @id @default(uuid())

    role          ManagerRole @relation(fields: [managerRoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    managerRoleId String

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    voteSuggestions VoteSuggestion[]
}

enum VoteStatus {
    PENDING
    RESOLVED
    DISABLED
}

model Vote {
    id     String     @id @default(uuid())
    status VoteStatus @default(PENDING)

    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String
    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    voteSelections  VoteSelection[]
    voteSuggestions VoteSuggestion[]

    @@unique([userId, proposalId])
}

model VoteSelection {
    id String @id @default(uuid())

    vote   Vote?   @relation(fields: [voteId], references: [id])
    voteId String?

    candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    candidateId String

    rank Int @default(1)

    @@index([voteId])
}

model VoteSuggestion {
    id String @id @default(uuid())

    vote   Vote?   @relation(fields: [voteId], references: [id])
    voteId String?

    candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    candidateId String

    suggestedByManager   Manager @relation(fields: [suggestedByManagerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    suggestedByManagerId String  @unique

    rank Int @default(1)
}

model UserActionLog {
    id         String      @id @default(uuid())
    action     UserActions
    userAgent  String?
    message    String?
    time       DateTime    @default(now())
    user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String?
    proposal   Proposal?   @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String?
}

enum UserActions {
    SIGNUP
    SIGNIN
    CREATE_PROPOSAL
    EDIT_START_END_DATES
    EDIT_RESOLUTION_DATE
    MANUALLY_RESOLVE_PROPOSAL
    EDIT_TITLE
    EDIT_DESCRIPTION
    EDIT_STATUS
    EDIT_VISIBILITY
    REMOVE_CANDIDATE
    ADD_CANDIDATE
    EDIT_CHOICE_COUNT
    EDIT_PATTERN_GRADE
    EDIT_PATTERN_ROLE
    OFFER_VOTE_SUGGESTION
    DISABLE_USER_VOTE
    ENABLE_USER_VOTE
    ACCEPT_VOTE_SUGGESTION
    REJECT_VOTE_SUGGESTION
    RESOLVED_VOTE
}

enum NotificationType {
    VOTE_SUGGESTION
    PROPOSAL_RESOLUTION
    PROPOSAL_ABORTION
    PROPOSAL_ACTIVATION
    PROPOSAL_UPDATE
    VOTE_DISABLED
    VOTE_ENABLED
    VOTE_SUGGESTION_ACCEPTED
    VOTE_SUGGESTION_REJECTED
}

model UserNotificationPackage {
    id               String             @id @default(uuid())
    type             NotificationType
    content          Json
    UserNotification UserNotification[]
}

model UserNotification {
    id         String                  @id @default(uuid())
    userId     String
    proposalId String
    createdAt  DateTime                @default(now())
    read       Boolean                 @default(false)
    package    UserNotificationPackage @relation(fields: [userNotificationPackageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposal                  Proposal @relation(fields: [proposalId], references: [id], onUpdate: Cascade)
    userNotificationPackageId String

    @@index([userId])
    @@index([proposalId])
}
