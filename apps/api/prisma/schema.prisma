generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    STUDENT
    TEACHER
    PARENT
    ADMIN
    SUPER_ADMIN
    GUEST
}

enum Grade {
    IA
    IB
    IC
    ID
    IE
    IIA
    IIB
    IIC
    IID
    IIE
    IIIA
    IIIB
    IIIC
    IIID
    TB1
    IVA
    IVB
    IVC
    IVD
    TB2
    NONE
}

model User {
    id            String     @id @default(uuid())
    email         String?
    personalNames String[]
    familyName    String
    grade         Grade
    roles         UserRole[]

    actionLogs UserActionLog[]

    votes            Vote[]
    managedProposals ProposalManager[]

    authoredPermissions ManagerPermissions[]

    active Boolean? @default(true)

    @@unique([personalNames, familyName, grade])
    @@index([personalNames, familyName, grade])
}

enum ProposalStatus {
    DRAFT
    ACTIVE
    RESOLVED
    ABORTED
}

enum ProposalVisibility {
    PUBLIC
    AGENT_ONLY
    MANAGER_ONLY
}

model Proposal {
    id          String             @id @default(uuid())
    title       String
    description String
    startDate   DateTime
    endDate     DateTime
    status      ProposalStatus
    visibility  ProposalVisibility @default(AGENT_ONLY)

    votes    Vote[]
    managers ProposalManager[]

    choices     ProposalChoice[]
    choiceCount Int
}

model ProposalChoice {
    id          String  @id @default(uuid())
    value       String
    description String?

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    votes Vote[]

    @@unique([value, proposalId])
}

model ProposalManagerRole {
    id          String  @id @default(uuid())
    roleName    String
    description String?

    managers ProposalManager[]

    permissionsId String
    permissions   ManagerPermissions @relation(fields: [permissionsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ManagerPermissions {
    id                      String                @id @default(uuid())
    managerRoles            ProposalManagerRole[]
    author                  User                  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId                String
    canEditTitle            Boolean               @default(false)
    canEditDescription      Boolean               @default(false)
    canEditDates            Boolean               @default(false)
    canEditStatus           Boolean               @default(false)
    canEditVisibility       Boolean               @default(false)
    canDeleteVotes          Boolean               @default(false)
    canCreateVotes          Boolean               @default(false)
    canEditManagers         Boolean               @default(false)
    canEditVoteChoices      Boolean               @default(false)
    canEditAvailableChoices Boolean               @default(false)
    canEditChoiceCount      Boolean               @default(false)
}

model ProposalManager {
    id String @id @default(uuid())

    role                  ProposalManagerRole @relation(fields: [proposalManagerRoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalManagerRoleId String

    proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String
}

enum VoteStatus {
    PENDING
    RESOLVED
}

model Vote {
    id     String     @id @default(uuid())
    status VoteStatus @default(PENDING)

    user       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String
    proposal   Proposal         @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    proposalId String
    choices    ProposalChoice[]

    @@unique([userId, proposalId])
}

model UserActionLog {
    id        String      @id @default(uuid())
    action    UserActions
    userAgent String?
    message   String?
    time      DateTime    @default(now())
    user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String?
}

enum UserActions {
    AUTH_ATTEMPT
    SIGNUP
    SIGNIN
    CREATE_PROPOSAL
    EDIT_PROPOSAL
    DELETE_PROPOSAL
    VOTE
    EDIT_VOTE
    DELETE_VOTE
}
